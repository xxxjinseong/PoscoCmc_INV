unit U450;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, d_MainDm, h_MainLib, h_ReferLib, Grids, StdCtrls, Buttons,
  DBGridEhGrouping, ToolCtrlsEh, DBGridEhToolCtrls, DynVarsEh, EhLibVCL,
  GridsEh, DBAxisGridsEh, DBGridEh, Data.Win.ADODB, Data.DB, Vcl.ComCtrls,
  Vcl.Menus, DBGridEhImpExp, PrnDbgeh ;

type
  TfrmU450 = class(TForm)
    shpB: TShape;
    shpL: TShape;
    shpR: TShape;
    EhPrint: TPrintDBGridEh;
    qryInfo: TADOQuery;
    dsInfo: TDataSource;
    shpT: TShape;
    Pnl_Main: TPanel;
    Pnl_List: TPanel;
    dgInfo: TDBGridEh;
    Pnl_Line: TPanel;
    Panel12: TPanel;
    Panel9: TPanel;
    Panel11: TPanel;
    Pnl_Top1: TPanel;
    DatePicker1: TDateTimePicker;
    Panel1: TPanel;
    cbDate: TCheckBox;
    procedure FormCreate(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormDeactivate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure dgTitleClick(Column: TColumnEh);
    procedure dgInfoDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumnEh; State: TGridDrawState);
    procedure DatePicker1Change(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    procedure fnCommandStart;
    procedure fnCommandAdd  ;
    procedure fnCommandExcel;
    procedure fnCommandDelete;
    procedure fnCommandPrint;
    procedure fnCommandQuery;
    procedure fnCommandClose;
    procedure fnWmMsgRecv (var MSG : TMessage) ; message WM_USER ;
    procedure SetComboBox;
  end;
  procedure U450Create();

const
  FormNo = '450' ;

var
  frmU450: TfrmU450;
  SrtFlag : integer = 0 ;

implementation

uses Main ;

{$R *.dfm}

//==============================================================================
// U240Create
//==============================================================================
procedure U450Create();
begin
  if not Assigned( frmU450 ) then
  begin
    frmU450 := TfrmU450.Create(Application);
    with frmU450 do
    begin
      fnCommandStart;
    end;
  end;
  frmU450.Show;
end;

//==============================================================================
// fnWmMsgRecv
//==============================================================================
procedure TfrmU450.fnWmMsgRecv(var MSG: TMessage);
begin
  case MSG.WParam of
    MSG_MDI_WIN_ADD     : begin fnCommandAdd     ; end;
    MSG_MDI_WIN_EXCEL   : begin fnCommandExcel   ; end;
    MSG_MDI_WIN_DELETE  : begin fnCommandDelete  ; end;
    MSG_MDI_WIN_PRINT   : begin fnCommandPrint   ; end;
    MSG_MDI_WIN_QUERY   : begin fnCommandQuery   ; end;
    MSG_MDI_WIN_CLOSE   : begin fnCommandClose   ; Close; end;
  end;
end;

//==============================================================================
// FormCreate
//==============================================================================
procedure TfrmU450.FormCreate(Sender: TObject);
begin
  DatePicker1.Date := Now;
end;

//==============================================================================
// FormShow
//==============================================================================
procedure TfrmU450.FormShow(Sender: TObject);
begin
//
end;

//==============================================================================
// FormActivate
//==============================================================================
procedure TfrmU450.FormActivate(Sender: TObject);
begin
  frmMain.LblMenu000.Caption := (Sender as TForm).Caption ;
  fnWmMsgSend( 21211,111 );
end;

//==============================================================================
// FormDeactivate
//==============================================================================
procedure TfrmU450.FormDeactivate(Sender: TObject);
var
  i : integer ;
begin
  for i := 0 to Self.ComponentCount-1 do
  begin
    if (Self.Components[i] is TTimer) then
       (Self.Components[i] as TTimer).Enabled := False ;
  end;
end;

//==============================================================================
// FormClose
//==============================================================================
procedure TfrmU450.FormClose(Sender: TObject; var Action: TCloseAction);
var
  i : integer ;
begin
  for i := 0 to Self.ComponentCount-1 do
  begin
    if (Self.Components[i] is TTimer) then
       (Self.Components[i] as TTimer).Enabled := False ;
  end;

  for i := 0 to Self.ComponentCount-1 Do
  begin
    if (Self.Components[i] is TADOQuery) then
       (Self.Components[i] as TADOQuery).Active := False ;
  end;

  Action := Cafree;
  try frmU450 := Nil ;
  except end;
end;

//==============================================================================
// fnCommandStart [Ω√¿€]
//==============================================================================
procedure TfrmU450.fnCommandStart;
begin
  SetComboBox;
  fnCommandQuery ;
end;

//==============================================================================
// fnCommandAdd [Ω≈±‘]
//==============================================================================
procedure TfrmU450.fnCommandAdd  ;
begin
//
end;

//==============================================================================
// fnCommandExcel [ø¢ºø]
//==============================================================================
procedure TfrmU450.fnCommandExcel;
begin
  if hlbEhgridListExcel ( dgInfo , '¿€æ˜Ω√∞£∫∞ Ω«¿˚¡∂»∏' + '_' + FormatDatetime('YYYYMMDD', Now) ) then
  begin
    MessageDlg('ø¢ºø ¿˙¿Â¿ª øœ∑·«œø¥Ω¿¥œ¥Ÿ.', mtConfirmation, [mbYes], 0);
  end;
end;

//==============================================================================
// fnCommandExcel [ªË¡¶]
//==============================================================================
procedure TfrmU450.fnCommandDelete;
begin
//
end;

//==============================================================================
// fnCommandPrint [¿Œº‚]
//==============================================================================
procedure TfrmU450.fnCommandPrint;
begin
  if not qryInfo.Active then Exit;
  fnCommandQuery;
  EhPrint.DBGridEh := dgInfo;
  EhPrint.PageFooter.RightText.Clear;
  EhPrint.PageFooter.RightText.Add(FormatDateTime('YYYY-MM-DD HH:NN:SS',Now()) + '   ' + MainDM.M_Info.UserCode);
  EhPrint.PageFooter.Font.Name := 'µ∏øÚ';
  EhPrint.PageFooter.Font.Size := 11;
  EhPrint.Preview;
end;

//==============================================================================
// fnCommandQuery [¡∂»∏]
//==============================================================================
procedure TfrmU450.fnCommandQuery;
var
  StrSQL : String;
  i : Integer;
  Date : String;
begin
  try
    Date := FormatDatetime('YYYYMMDD', DatePicker1.Date);

    with qryInfo do
    begin
      Close;
      SQL.Clear;
      StrSQL := ' SELECT * FROM uf_Disp_InOutTime(' + QuotedStr(Date) + ')';
      SQL.Text := StrSQL;
      Open;
    end;
  except
    if qryInfo.Active then qryInfo.Close;
  end;
end;

//==============================================================================
// fnCommandClose [¥›±‚]
//==============================================================================
procedure TfrmU450.fnCommandClose;
begin
  Close;
end;

//==============================================================================
// SetComboBox
//==============================================================================
procedure TfrmU450.SetComboBox;
begin
//
end;

//==============================================================================
// dgTitleClick
//==============================================================================
procedure TfrmU450.dgTitleClick(Column: TColumnEh);
begin
  if Column.Field.DataSet is TADOQuery then
  begin
    with TADOQuery(Column.Field.DataSet) do
    begin
      if RecordCount=0 then Exit ;
      if SrtFlag = 0 then
      begin
        SrtFlag := 1; Sort := Column.FieldName + ' DESC' ;
      end else
      begin
        SrtFlag := 0; Sort := Column.FieldName + ' ASC' ;
      end;
    end;
  end;
end;

//==============================================================================
// dgInfoDrawColumnCell
//==============================================================================
procedure TfrmU450.dgInfoDrawColumnCell(Sender: TObject; const Rect: TRect;
  DataCol: Integer; Column: TColumnEh; State: TGridDrawState);
begin
  with dgInfo do
  begin
    if DataCol in [2] then
    begin
      if StrToInt(Column.Field.DataSet.FieldByName('IN_Count').AsString) <> 0 then
      begin
        Canvas.Font.Color := clBlue;
        Canvas.Font.Style := [fsBold];
      end else
      begin
        Canvas.Font.Color := clBlack;
        Canvas.Font.Style := [];
      end;
    end;

    if DataCol in [3] then
    begin
      if StrToInt(Column.Field.DataSet.FieldByName('OT_Count').AsString) <> 0 then
      begin
        Canvas.Font.Color := clBlue;
        Canvas.Font.Style := [fsBold];
      end else
      begin
        Canvas.Font.Color := clBlack;
        Canvas.Font.Style := [];
      end;
    end;

    dgInfo.defaultdrawcolumncell(rect, datacol, column, state);
  end;
end;

//==============================================================================
// DatePicker1Change
//==============================================================================
procedure TfrmU450.DatePicker1Change(Sender: TObject);
begin
  fnCommandQuery;
end;

end.
